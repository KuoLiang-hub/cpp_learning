11.6 - Selection Sort:
	Swap smallest with current position.
	[5, 3, 1, 4, 8] =>
	[1, 3, 5, 4, 8] =>
	[1, 3, 4, 5, 8]
runtime: (N^2)/2, O(N^2)

	
11.9 - Insertion Sort:
	loop to swap the one next to current position. i=1, j=i-1 for outter loop.
i=1,j=0
	[5, 3, 1, 4, 8] =>
	[3, 5, 1, 4, 8] =>
i=2,
	j=12
	[3, 1, 5, 4, 8] =>
	j=0
	[1, 3, 5, 4, 8] =>
i=3
	j=2
	[1, 3, 4, 5, 8] =>
i=4
	j=3
	[1, 3, 4, 5, 8]
runtime : n(n-1)/2 , O(n^2)


11.12 - Shell sort
	i + gap value
	gap value determins how many sub lists. k = 2, means 2 lists.

11.15 quick sourt
	partition()
		runt time : O(N)
	
	quick_sort()

		quick case:
		runtime: O(N log(N))
		comparison: N * log2(N)
		eg. 1024 element, will have 1024 * log2(1024) = 10240 

		worst case: 
		level: N-1 
		runtime : (N+1)N/2 , O(N^2)
		quick sout function called: 1 + 2(N -1) = 2N - 1

11.18 Merge sort
	Runtime: O(N Log(N))
	recursive level : log2(N)


11.21 Bucket sort
	designed for arrays with non-negative numbers.
	bucket : (M + 1) / N values in each bucket
	eg. max 49, 10 bucket, (49 + 1) / 10 = 5 
	index = floor(number * N/(M + 1))
	eg. (71,11,99,7,14) into 5 buckets
	71 : floor(71 * 5/(99+1)) = 3
	99 : floor(99 * 5/(99+1)) = 4


11.22 Radix sort
	designed for integers
	10 buckets 0 - 9, could be based on 1's digit, 10's 100's....
	runtime:	O(N)
	space: O(N)

11.25 Overview of fast sorting algorithms
sorting algorithm, 	average case runtime complexity, 	Fast?
Selection sort 		O(N^2)								No
Insertion sort 		O(N^2)								No
Shell sort 			O(N^1.5)							No
Quicksort 			O(N log(N))							yes
Merge sort 			O(N log(N))							yes
Heap sort 			O(N log(N))							yes
Radix sort 			O(N)								yes

Radix sort is NOT comparsion sorting algorithm.

sorting algorithm, 	Best Case, 	average case, 	Worst case
Quicksort 			O(Nlog(N))	O(Nlog(N)) 		O(N^2)
Merge sort 			O(Nlog(N))	O(Nlog(N))		O(Nlog(N))	
Heap sort 			O(N)		O(Nlog(N)) 		O(Nlog(N)) 
Radix sort 			O(N)		O(N)			O(N)


11.26 sorting with different operators.
	a_list = sorted(b_lst)	# return a new list.
	b_lst.sort()	# modify list, no return

	# decending order
	a_list = sorted(b_lst, reverse = True)
	b_lit.sort(reverse = True)

	# sort ignore case
	case_insensitve = sorted(list1, key = str.lower)

	# custom key function
	def key_is_name(element):
		return element[0]
	def key_is_id(element):
		return element[1]

	class_lst = [("rob", 1234), ("Amy", 2345), ("Jen", 2483)]

	namesSort = sorted(class_lst, key = key_is_name)
	print(namesSort) #	
	out:	[("Amy", 2345), ("Jen", 2483), ("rob", 1234)]

	idSort = sorted(class_lst, key = key_is_id)
	print(idSort) 	
	out:	[("rob", 1234), ("Amy", 2345), ("Jen", 2483)]

	# itemgetter() takes int returns function.
	import operator
	class_list = [("rob", 1234), ("Amy", 2345), ("Jen", 2483)]
	name_result = sorted(class_list, key = operator.itemgetter(0))
	id_result = sorted(class_list, key = operator.itemgetter(1))
	print(name_result) 	
	out:	[("Amy", 2345), ("Jen", 2483), ("rob", 1234)]
	print(id_result) 	
	out:	[("rob", 1234), ("Amy", 2345), ("Jen", 2483)]

11.27 Java sorting.
	Arrays.sort(numbers);
	Collections.sort(names);
	// Compareble<T> interface
	class InventoryItem implements Comparable<InventoryItem> {
		public string name;

		@override
		public int compareTo(InventoryItem other) {
			return name.compareTo(ohter.name)
		}
	}

	//Comparator<T> interface
	class InventoryItemNameComparer implements Comparator<InventoryItem> {
		public int compare(InventoryItem item1, InventoryItem item2) {
			return item1.name.compareTo(item2.name)
		}
	}
	Comparator<InventoryItem> comparator = new InventoryItemNameComparer()
	Collections.sort(list, comparator)

11.28 Bubble sort
	swap adjacent elements
	runtime : alwyas O(N^2) best case and worst case.

11.29 Suickselect